// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: com/appliedrec/verid3/serialization/capture3d/depth_map.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct DepthMap {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var data: Data = Data()

  var width: Int32 = 0

  var height: Int32 = 0

  var bytesPerRow: Int32 = 0

  var bitsPerElement: Int32 = 0

  var principalPoint: PointF {
    get {return _principalPoint ?? PointF()}
    set {_principalPoint = newValue}
  }
  /// Returns true if `principalPoint` has been explicitly set.
  var hasPrincipalPoint: Bool {return self._principalPoint != nil}
  /// Clears the value of `principalPoint`. Subsequent reads from it will return its default value.
  mutating func clearPrincipalPoint() {self._principalPoint = nil}

  var focalLength: PointF {
    get {return _focalLength ?? PointF()}
    set {_focalLength = newValue}
  }
  /// Returns true if `focalLength` has been explicitly set.
  var hasFocalLength: Bool {return self._focalLength != nil}
  /// Clears the value of `focalLength`. Subsequent reads from it will return its default value.
  mutating func clearFocalLength() {self._focalLength = nil}

  var lensDistortionLookupTable: [Float] = []

  var lensDistortionCenter: PointF {
    get {return _lensDistortionCenter ?? PointF()}
    set {_lensDistortionCenter = newValue}
  }
  /// Returns true if `lensDistortionCenter` has been explicitly set.
  var hasLensDistortionCenter: Bool {return self._lensDistortionCenter != nil}
  /// Clears the value of `lensDistortionCenter`. Subsequent reads from it will return its default value.
  mutating func clearLensDistortionCenter() {self._lensDistortionCenter = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _principalPoint: PointF? = nil
  fileprivate var _focalLength: PointF? = nil
  fileprivate var _lensDistortionCenter: PointF? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension DepthMap: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "com.appliedrec.verid3.serialization.capture3d"

extension DepthMap: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DepthMap"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
    2: .same(proto: "width"),
    3: .same(proto: "height"),
    4: .standard(proto: "bytes_per_row"),
    5: .standard(proto: "bits_per_element"),
    6: .standard(proto: "principal_point"),
    7: .standard(proto: "focal_length"),
    8: .standard(proto: "lens_distortion_lookup_table"),
    9: .standard(proto: "lens_distortion_center"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.data) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.width) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.height) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.bytesPerRow) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self.bitsPerElement) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._principalPoint) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._focalLength) }()
      case 8: try { try decoder.decodeRepeatedFloatField(value: &self.lensDistortionLookupTable) }()
      case 9: try { try decoder.decodeSingularMessageField(value: &self._lensDistortionCenter) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.data.isEmpty {
      try visitor.visitSingularBytesField(value: self.data, fieldNumber: 1)
    }
    if self.width != 0 {
      try visitor.visitSingularInt32Field(value: self.width, fieldNumber: 2)
    }
    if self.height != 0 {
      try visitor.visitSingularInt32Field(value: self.height, fieldNumber: 3)
    }
    if self.bytesPerRow != 0 {
      try visitor.visitSingularInt32Field(value: self.bytesPerRow, fieldNumber: 4)
    }
    if self.bitsPerElement != 0 {
      try visitor.visitSingularInt32Field(value: self.bitsPerElement, fieldNumber: 5)
    }
    try { if let v = self._principalPoint {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._focalLength {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    } }()
    if !self.lensDistortionLookupTable.isEmpty {
      try visitor.visitPackedFloatField(value: self.lensDistortionLookupTable, fieldNumber: 8)
    }
    try { if let v = self._lensDistortionCenter {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: DepthMap, rhs: DepthMap) -> Bool {
    if lhs.data != rhs.data {return false}
    if lhs.width != rhs.width {return false}
    if lhs.height != rhs.height {return false}
    if lhs.bytesPerRow != rhs.bytesPerRow {return false}
    if lhs.bitsPerElement != rhs.bitsPerElement {return false}
    if lhs._principalPoint != rhs._principalPoint {return false}
    if lhs._focalLength != rhs._focalLength {return false}
    if lhs.lensDistortionLookupTable != rhs.lensDistortionLookupTable {return false}
    if lhs._lensDistortionCenter != rhs._lensDistortionCenter {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
